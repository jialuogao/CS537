#include "types.h"
#include "defs.h"
#include "param.h"
#include "mmu.h"
#include "x86.h"
#include "proc.h"
#include "spinlock.h"
//#include "pstat.h"

struct {
  struct spinlock lock;
  struct proc proc[4][NPROC];
  struct proc *ztail;
} ptable;

static struct proc *initproc;

int nextpid = 1;
extern void forkret(void);
extern void trapret(void);

static void wakeup1(void *chan);

void dumpmem(){
  struct proc *p;
  cprintf("\nx  id   name  priority  state  ticks\n");
  for(int i = 0; i < 4; i ++){ int j = 0;
    for(p = ptable.proc[i];p<&ptable.proc[i][NPROC];p++, j++)
      if(p->state != UNUSED)
        cprintf("%d    %d    %s   %d       %d     %d\n",j,p->pid,p->name,p->priority,p->state,p->curtks);
  }
  cprintf("\n");
}

// -1 for no space else 0
int densetable(int lv){
  struct proc *p;
  struct proc *q;
  for(p = ptable.proc[lv];p < &ptable.proc[lv][NPROC]; p++){
    if(p->state == UNUSED){
      for(q = p; q < &ptable.proc[lv][NPROC]; q++){
        if(q->state != UNUSED){
          *p = *q; 
          q->state = UNUSED;
          if(q == initproc) initproc = p;
          ptable.ztail = p + 1;
          break;
        }
      }
    }
  }
  if(ptable.ztail >= &ptable.proc[lv][NPROC]) return -1;
  else return 0;
}

struct proc*
changepriority(struct proc *pro, int newlv)
{ 
  struct proc* p;
  if(newlv == 0) {
    cprintf("before dump into lv 0: \n");dumpmem();
    if(ptable.ztail >= &ptable.proc[newlv][NPROC]) {
      if(densetable(0) == -1){
        cprintf("Error run out of space on lv 0\n");
      }
    }
    else p = ptable.ztail;
    if(p->state == UNUSED) {
      *p = *pro;
      pro->state = UNUSED;
      ptable.ztail = p + 1;
      p->priority = newlv;
      p->curtks = 0;
      p->curwaittks = 0;
      if(pro == initproc) initproc = p;
      cprintf("after dump into lv 0: \n");dumpmem();
      return p;//TODO
    } else {cprintf("Error ztail is used!\n");}
  }
  else {
    for(p = ptable.proc[newlv]; p < &ptable.proc[newlv][NPROC]; p++) {
      if(p->state == UNUSED) {
        *p = *pro;
        pro->state = UNUSED;
        p->priority = newlv;
        p->curtks = 0;
        p->curwaittks = -1;
        (p->waittks)[newlv]--;
        if(pro == initproc) initproc = p;
	cprintf("pid: %d %d\n", p->pid, pro->pid);
        cprintf("state: %d %d\n",p->state, pro->state);
        cprintf("priority: %d %d\n",p->priority,pro->priority);
        
	//cprintf("ticks: %d %d\n", p->curtks, pro->curtks);
	//cprintf("name: %s %s\n", p->name, pro->name);
	//cprintf("coordinate l, x: %d, %d\n", newlv, p-ptable.proc[newlv]);
	//cprintf("address pro %p initpro %p p %p", pro,initproc,p);
        return p;
      }
    }
  }
  return NULL;
}

void
resetp(struct proc *p){
  p->priority = 3;
  p->curtks = 0;
  p->curwaittks = 0;
  for(int i = 0; i < 4; i++){
    p->ticks[i] = 0;
    p->waittks[i] = 0;
  }
}

void
pinit(void)
{
  initlock(&ptable.lock, "ptable");
}

// Look in the process table for an UNUSED proc.
// If found, change state to EMBRYO and initialize
// state required to run in the kernel.
// Otherwise return 0.
static struct proc*
allocproc(void)
{
  struct proc *p;
  char *sp;

  acquire(&ptable.lock);
  for(p = ptable.proc[3]; p < &ptable.proc[3][NPROC]; p++)
    if(p->state == UNUSED)
      goto found;
  release(&ptable.lock);
  cprintf("got here allocproc\n");/////////////////
  return 0;

found:
  p->state = EMBRYO;
  p->pid = nextpid++;
  release(&ptable.lock);

  // Allocate kernel stack if possible.
  if((p->kstack = kalloc()) == 0){
    p->state = UNUSED;
    return 0;
  }
  sp = p->kstack + KSTACKSIZE;
  
  // Leave room for trap frame.
  sp -= sizeof *p->tf;
  p->tf = (struct trapframe*)sp;
  
  // Set up new context to start executing at forkret,
  // which returns to trapret.
  sp -= 4;
  *(uint*)sp = (uint)trapret;

  sp -= sizeof *p->context;
  p->context = (struct context*)sp;
  memset(p->context, 0, sizeof *p->context);
  p->context->eip = (uint)forkret;

  return p;
}

// Set up first user process.
void
userinit(void)
{
  struct proc *p;
  extern char _binary_initcode_start[], _binary_initcode_size[];
  
  p = allocproc();
  acquire(&ptable.lock);
  initproc = p;
  if((p->pgdir = setupkvm()) == 0)
    panic("userinit: out of memory?");
  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
  p->sz = PGSIZE;
  memset(p->tf, 0, sizeof(*p->tf));
  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
  p->tf->es = p->tf->ds;
  p->tf->ss = p->tf->ds;
  p->tf->eflags = FL_IF;
  p->tf->esp = PGSIZE;
  p->tf->eip = 0;  // beginning of initcode.S

  safestrcpy(p->name, "initcode", sizeof(p->name));
  p->cwd = namei("/");

  p->state = RUNNABLE;
  resetp(p);
  ptable.ztail = ptable.proc[0];
  release(&ptable.lock);
}

// Grow current process's memory by n bytes.
// Return 0 on success, -1 on failure.
int
growproc(int n)
{
  uint sz;
  
  sz = proc->sz;
  if(n > 0){
    if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
      return -1;
  } else if(n < 0){
    if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
      return -1;
  }
  proc->sz = sz;
  switchuvm(proc);
  return 0;
}

// Create a new process copying p as the parent.
// Sets up stack to return as if from system call.
// Caller must set state of returned proc to RUNNABLE.
int
fork(void)
{
  int i, pid;
  struct proc *np;

  // Allocate process.
  if((np = allocproc()) == 0)
    return -1;

  // Copy process state from p.
  if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
    kfree(np->kstack);
    np->kstack = 0;
    np->state = UNUSED;
    return -1;
  }
  np->sz = proc->sz;
  np->parent = proc;
  *np->tf = *proc->tf;

  // Clear %eax so that fork returns 0 in the child.
  np->tf->eax = 0;

  for(i = 0; i < NOFILE; i++)
    if(proc->ofile[i])
      np->ofile[i] = filedup(proc->ofile[i]);
  np->cwd = idup(proc->cwd);
 
  pid = np->pid;
  np->state = RUNNABLE;
  safestrcpy(np->name, proc->name, sizeof(proc->name));
  resetp(np);
  return pid;
}

// Exit the current process.  Does not return.
// An exited process remains in the zombie state
// until its parent calls wait() to find out it exited.
void
exit(void)
{
  struct proc *p;
  int fd;

  if(proc == initproc)
    panic("init exiting");

  // Close all open files.
  for(fd = 0; fd < NOFILE; fd++){
    if(proc->ofile[fd]){
      fileclose(proc->ofile[fd]);
      proc->ofile[fd] = 0;
    }
  }

  iput(proc->cwd);
  proc->cwd = 0;

  acquire(&ptable.lock);

  // Parent might be sleeping in wait().
  wakeup1(proc->parent);

  // Pass abandoned children to init.
  for(int l = 3; l > -1; l--){
    for(p = ptable.proc[l]; p < &ptable.proc[l][NPROC]; p++){
      if(p->parent == proc){
        p->parent = initproc;
        if(p->state == ZOMBIE)
          wakeup1(initproc);
      }
    }
  }

  // Jump into the scheduler, never to return.
  proc->state = ZOMBIE;
  sched();
  panic("zombie exit");
}

// Wait for a child process to exit and return its pid.
// Return -1 if this process has no children.
int
wait(void)
{
  struct proc *p;
  int havekids, pid;

  acquire(&ptable.lock);
  for(;;){
    // Scan through table looking for zombie children.
    havekids = 0;
    for(int l = 3; l > -1; l--){
      for(p = ptable.proc[l]; p < &ptable.proc[l][NPROC]; p++){
        if(p->parent != proc)
          continue;
        havekids = 1;
        if(p->state == ZOMBIE){
          // Found one.
          pid = p->pid;
          kfree(p->kstack);
          p->kstack = 0;
          freevm(p->pgdir);
          p->state = UNUSED;
          p->pid = 0;
          p->parent = 0;
          p->name[0] = 0;
          p->killed = 0;
          resetp(p);
          release(&ptable.lock);
          return pid;
        }
      }
    }

    // No point waiting if we don't have any children.
    if(!havekids || proc->killed){
      release(&ptable.lock);
      return -1;
    }

    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
    sleep(proc, &ptable.lock);  //DOC: wait-sleep
  }
}

const int INT_MAX = +2147483647;
const int DEMOTED = 1;
struct proc*
updatetimer(struct proc *runp){
//cprintf("update timer reached! \n");
//cprintf("runp pid: %d\n", runp->pid);
  struct proc *p;
  for(int i = 3; i > -1; i--){
    int timelim = INT_MAX;
    int waitlim = 500;
    if(i == 1){ timelim = 32; waitlim = 320; }
    if(i == 2){ timelim = 16; waitlim = 160; }
    if(i == 3){ timelim = 8; }
    for(p = ptable.proc[i]; p < &ptable.proc[i][NPROC]; p++){
      if(p->state == RUNNABLE && p != runp){
        p->curwaittks++; (p->waittks)[i]++;
	//cprintf("\nwaittks: bf if: %d pid: %d priority: %d state %d\n", p->curwaittks, p->pid, p->priority,p->state);
	//cprintf("l, x: %d, %d\n",i,p-ptable.proc[i]);

        if(p->curwaittks == waitlim && i != 3){
          changepriority(p, i + 1);
        }
      } else if(p == runp) {
          p->curtks++; (p->ticks)[i]++;
//cprintf("\ncurtks: bf if: %d pid: %d priority: %d state %d\n", p->curtks, p->pid, p->priority,p->state);
//cprintf("l, x: %d, %d\n",i,p-ptable.proc[i]);
//cprintf("3,5 pid: %d, name: %s\n",ptable.proc[3][5].pid, ptable.proc[3][5].name);
          if(p->curtks == timelim && i != 0){
            dumpmem();
            p = changepriority(p, i - 1); dumpmem();
	    if(p != NULL) return p;
	    else cprintf("Error when demoting, no space left\n");
//cprintf("curtks: %d\n", p->curtks);
        }
      }
    }
  }
  return runp;
}
// Per-CPU process scheduler.
// Each CPU calls scheduler() after setting itself up.
// Scheduler never returns.  It loops, doing:
//  - choose a process to run
//  - swtch to start running that process
//  - eventually that process transfers control
//      via swtch back to the scheduler.
void
scheduler(void)
{
  struct proc *p;
  //int demoted = 0;
  //int prevp = -1;
  for(;;){
    // Enable interrupts on this processor.
    sti();

    // Loop over process table looking for process to run.
    acquire(&ptable.lock);
    for(int l = 3; l > -1; l--){
      for(p = ptable.proc[l]; p < &ptable.proc[l][NPROC]; p++){
        if(p->state == RUNNABLE){
          // Switch to chosen process.  It is the process's job
          // to release ptable.lock and then reacquire it
          // before jumping back to us.
          goto newproc;
        }
      }
    }
    if(0) {
    newproc:
      //dumpmem();
      proc = updatetimer(p);
      p = proc;
      switchuvm(p);
      p->state = RUNNING;
      //cprintf("proc pid %d state %d lv %d x %d\n",proc->pid,proc->state,proc->priority,proc-ptable.proc[proc->priority]);
      //cprintf("p pid %d state %d lv %d x %d\n",p->pid,p->state,p->priority,p-ptable.proc[p->priority]);
      //if(demoted || prevp != proc->pid)
        swtch(&cpu->scheduler, proc->context);
      //prevp = proc->pid;
      switchkvm();
      //cprintf("Ticks: %d pid %d\n", ticks, proc->pid);
      // Process is done running for now.
      // It should have changed its p->state before coming back.
      proc = 0;
    }
    release(&ptable.lock);
  }
}

// Enter scheduler.  Must hold only ptable.lock
// and have changed proc->state.
void
sched(void)
{
  int intena;

  if(!holding(&ptable.lock))
    panic("sched ptable.lock");
  if(cpu->ncli != 1)
    panic("sched locks");
  if(proc->state == RUNNING)
    panic("sched running");
  if(readeflags()&FL_IF)
    panic("sched interruptible");
  intena = cpu->intena;
  swtch(&proc->context, cpu->scheduler);
  cpu->intena = intena;
}

// Give up the CPU for one scheduling round.
void
yield(void)
{
  acquire(&ptable.lock);  //DOC: yieldlock
  proc->state = RUNNABLE;
  sched();
  release(&ptable.lock);
}

// A fork child's very first scheduling by scheduler()
// will swtch here.  "Return" to user space.
void
forkret(void)
{
  // Still holding ptable.lock from scheduler.
  release(&ptable.lock);
  
  // Return to "caller", actually trapret (see allocproc).
}

// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
void
sleep(void *chan, struct spinlock *lk)
{
  if(proc == 0)
    panic("sleep");

  if(lk == 0)
    panic("sleep without lk");

  // Must acquire ptable.lock in order to
  // change p->state and then call sched.
  // Once we hold ptable.lock, we can be
  // guaranteed that we won't miss any wakeup
  // (wakeup runs with ptable.lock locked),
  // so it's okay to release lk.
  if(lk != &ptable.lock){  //DOC: sleeplock0
    acquire(&ptable.lock);  //DOC: sleeplock1
    release(lk);
  }

  // Go to sleep.
  proc->chan = chan;
  proc->state = SLEEPING;
  sched();

  // Tidy up.
  proc->chan = 0;

  // Reacquire original lock.
  if(lk != &ptable.lock){  //DOC: sleeplock2
    release(&ptable.lock);
    acquire(lk);
  }
}

// Wake up all processes sleeping on chan.
// The ptable lock must be held.
static void
wakeup1(void *chan)
{
  struct proc *p;
  for(int l = 3; l > -1; l--)
    for(p = ptable.proc[l]; p < &ptable.proc[l][NPROC]; p++)
      if(p->state == SLEEPING && p->chan == chan)
        p->state = RUNNABLE;
}

// Wake up all processes sleeping on chan.
void
wakeup(void *chan)
{
  acquire(&ptable.lock);
  wakeup1(chan);
  release(&ptable.lock);
}

// Kill the process with the given pid.
// Process won't exit until it returns
// to user space (see trap in trap.c).
int
kill(int pid)
{
  struct proc *p;

  acquire(&ptable.lock);
  for(int l = 3; l > -1; l--){
    for(p = ptable.proc[l]; p < &ptable.proc[l][NPROC]; p++){
      if(p->pid == pid){
        p->killed = 1;
        // Wake process from sleep if necessary.
        if(p->state == SLEEPING)
          p->state = RUNNABLE;
        release(&ptable.lock);
        return 0;
      }
    }
  }
  release(&ptable.lock);
  return -1;
}

// Print a process listing to console.  For debugging.
// Runs when user types ^P on console.
// No lock to avoid wedging a stuck machine further.
void
procdump(void)
{
  static char *states[] = {
  [UNUSED]    "unused",
  [EMBRYO]    "embryo",
  [SLEEPING]  "sleep ",
  [RUNNABLE]  "runble",
  [RUNNING]   "run   ",
  [ZOMBIE]    "zombie"
  };
  int i;
  struct proc *p;
  char *state;
  uint pc[10];
  for(int l = 3; l > -1; l--){
    for(p = ptable.proc[l]; p < &ptable.proc[l][NPROC]; p++){
      if(p->state == UNUSED)
        continue;
      if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
        state = states[p->state];
      else
        state = "???";
      cprintf("pid %d state %s pname %s\n", p->pid, state, p->name);
      cprintf("priority %d cur running tks %d cur wait tks %d\n", p->priority, p->curtks, p->curwaittks);
      //cprintf("ticks in queue 3: %d queue 2: %d queue 1: %d queue 0: %d",p->ticks[3],p->ticks[2],p->ticks[1],p->ticks[0]);
      //cprintf("ticks in wait q3: %d q2: %d q1: %d q0: %d",p->waittks[3],p->waittks[2],p->waittks[1],p->waittks[0]);
      if(p->state == SLEEPING){
        getcallerpcs((uint*)p->context->ebp+2, pc);
        for(i=0; i<10 && pc[i] != 0; i++)
          cprintf(" %p", pc[i]);
      }
      cprintf("\n");
    }
  }
}


